q()
suppressMessages(library(jsonlite, quietly=TRUE))
suppressMessages(library(aws.s3,   quietly=TRUE))
suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
asremlPlusURL <- "http://cran.wustl.edu//src/contrib/Archive/asremlPlus/asremlPlus_2.0-12.tar.gz"
suppressMessages(install.packages(asremlPlusURL,repos=NULL,type="source"))
suppressMessages(library(asreml,     quietly=TRUE))
suppressMessages(library(asremlPlus, quietly=TRUE))
# Source code to be tested.
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
# Load needed packages
suppressMessages(library(jsonlite, quietly=TRUE))
suppressMessages(library(aws.s3,   quietly=TRUE))
suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
asremlPlusURL <- "http://cran.wustl.edu//src/contrib/Archive/asremlPlus/asremlPlus_2.0-12.tar.gz"
suppressMessages(install.packages(asremlPlusURL,repos=NULL,type="source"))
version()
suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
devtools::install_version("dae", version = "3.0-23", repos = "https://cran.r-project.org")
suppressMessages(library(asreml,     quietly=TRUE))
suppressMessages(library(asremlPlus, quietly=TRUE))
asremlPlusURL <- "http://cran.wustl.edu//src/contrib/Archive/asremlPlus/asremlPlus_2.0-12.tar.gz"
suppressMessages(install.packages(asremlPlusURL,repos=NULL,type="source"))
suppressMessages(library(asreml,     quietly=TRUE))
suppressMessages(library(asremlPlus, quietly=TRUE))
# Source code to be tested.
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
# Read in RCB default parameter list from Dominio
RCB_DefaultParameterList <- fromJSON("/repos/RCB4Cloud/Reference/Data/RCB_DefaultParameterList.json")
# Echo guts of RCB_DefaultParameterList
RCB_DefaultParameterList
# Read in S3-YLD-data-file for local Domino directory
dfyld <- as.data.frame(fromJSON("/repos/RCB4Cloud/Reference/Data/RCB_input_data.json"))
# For testing purposes create the following columns in dfyld
dfyld$numValue <- dfyld$NUM_VALUE
dfyld$fieldId  <- dfyld$FIELD_NAME
dfyld$repId    <- dfyld$BR_REP_ID
dfyld$factor1  <- dfyld$GERMPLASM_ID # can also use dfyld$TEST_SET_ENTRY_ID or dfyld$entryId
dfyld$experimentalUnitId <- as.character(dfyld$PLOT_ID)
RCB_ModelFittingFunction
params.in                 <- fromJSON('Reference/Data/parameters-rcb-md.json')
params.in$sufficientDataThreshold <- 18 # Is 20 but for the sake of the tests below reset to 18.
data.mlmr                 <- fromJSON('Reference/Data/input-rcb-md.json')
data.mlmr$SeedProductName <- as.factor(data.mlmr$SeedProductName)
data.mlmr$FieldName       <- as.factor(data.mlmr$FieldName)
data.mlmr$RepNumber       <- as.factor(data.mlmr$RepNumber)
mlmrcc                    <- complete.cases(data.mlmr[,c("ObservationValueNumeric","FieldName","RepNumber","SeedProductName")])
mlmrdup                   <- duplicated(data.mlmr[,c("ObservationValueNumeric","FieldName","RepNumber","SeedProductName")])
data.mlmr <- droplevels(data.mlmr[mlmrcc == TRUE & mlmrdup == FALSE, ])
data.slmr <- droplevels(data.mlmr[data.mlmr$FieldName == data.mlmr$FieldName[1], ])
data.mlsr <- droplevels(data.mlmr[data.mlmr$RepNumber == data.mlmr$RepNumber[1], ])
dim(data.mlmr) # returns 54 28
dim(data.mlsr) # returns 18 28
dim(data.slmr) # returns 18 28
length(unique(data.mlmr$SeedProductName)) # returns 6
length(unique(data.mlmr$FieldName))       # returns 3
length(unique(data.mlmr$RepNumber))       # returns 3
length(unique(data.mlsr$SeedProductName)) # returns 6
length(unique(data.mlsr$FieldName))       # returns 3
length(unique(data.mlsr$RepNumber))       # returns 1
length(unique(data.slmr$SeedProductName)) # returns 6
length(unique(data.slmr$FieldName))       # returns 1
length(unique(data.slmr$RepNumber))       # returns 3
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
write_json(resultsmlmr, "/repos/RCB4Cloud/Reference/Data/AATest.json", pretty =T, auto_unbox=T, digits=12)
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
# Load needed packages
suppressMessages(library(jsonlite, quietly=TRUE))
suppressMessages(library(aws.s3,   quietly=TRUE))
#suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
devtools::install_version("dae", version = "3.0-23", repos = "https://cran.r-project.org")
3
# Load needed packages
suppressMessages(library(jsonlite, quietly=TRUE))
suppressMessages(library(aws.s3,   quietly=TRUE))
#suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
devtools::install_version("dae", version = "3.0-23", repos = "https://cran.r-project.org")
asremlPlusURL <- "http://cran.wustl.edu//src/contrib/Archive/asremlPlus/asremlPlus_2.0-12.tar.gz"
suppressMessages(install.packages(asremlPlusURL,repos=NULL,type="source"))
suppressMessages(library(asreml,     quietly=TRUE))
suppressMessages(library(asremlPlus, quietly=TRUE))
options(digits = 20)
# Source code to be tested.
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
data.mlmr                 <- fromJSON('Reference/Data/input-rcb-md.json')
mlmrcc                    <- complete.cases(data.mlmr[,c("ObservationValueNumeric","FieldName","RepNumber","SeedProductName")])
data.mlmr$RepNumber       <- as.factor(data.mlmr$RepNumber)
mlmrdup                   <- duplicated(data.mlmr[,c("ObservationValueNumeric","FieldName","RepNumber","SeedProductName")])
data.slmr <- droplevels(data.mlmr[data.mlmr$FieldName == data.mlmr$FieldName[1], ])
data.mlmr <- droplevels(data.mlmr[mlmrcc == TRUE & mlmrdup == FALSE, ])
data.mlmr$SeedProductName <- as.factor(data.mlmr$SeedProductName)
params.in$sufficientDataThreshold <- 18 # Is 20 but for the sake of the tests below reset to 18.
data.mlsr <- droplevels(data.mlmr[data.mlmr$RepNumber == data.mlmr$RepNumber[1], ])
params.in                 <- fromJSON('Reference/Data/parameters-rcb-md.json')
data.mlmr$FieldName       <- as.factor(data.mlmr$FieldName)
data.mlmr                 <- fromJSON('Reference/Data/input-rcb-md.json')
str(data.mlmr)
mlmrcc                    <- complete.cases(data.mlmr[,c("ObservationValueNumeric","FieldName","RepNumber","SeedProductName")])
mlmrdup                   <- duplicated(data.mlmr[,c("ObservationValueNumeric","FieldName","RepNumber","SeedProductName")])
data.mlmr <- droplevels(data.mlmr[mlmrcc == TRUE & mlmrdup == FALSE, ])
data.slmr <- droplevels(data.mlmr[data.mlmr$FieldName == data.mlmr$FieldName[1], ])
data.mlsr <- droplevels(data.mlmr[data.mlmr$RepNumber == data.mlmr$RepNumber[1], ])
dim(data.mlmr) # returns 54 28
dim(data.mlsr) # returns 18 28
dim(data.slmr) # returns 18 28
length(unique(data.mlmr$SeedProductName)) # returns 6
length(unique(data.mlmr$FieldName))       # returns 3
length(unique(data.mlmr$RepNumber))       # returns 3
length(unique(data.mlsr$SeedProductName)) # returns 6
length(unique(data.mlsr$FieldName))       # returns 3
length(unique(data.mlsr$RepNumber))       # returns 1
length(unique(data.slmr$SeedProductName)) # returns 6
length(unique(data.slmr$FieldName))       # returns 1
length(unique(data.slmr$RepNumber))       # returns 3
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
zp4o <- resultsmlmr
zp5o <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P5')
names(zp5o)
names(zp4o)
names(zp5o$lsmTable)
names(zp4o$lsmTable)
zp2o <- RCB_ModelFittingFunction(data.mlsr, params.in, analysisType = 'P2')
params.in$sufficientDataThreshold
### MLSR model fit (P2)
params.in$sufficientDataThreshold <- nrow(data.mlsr)
zp2o <- RCB_ModelFittingFunction(data.mlsr, params.in, analysisType = 'P2')
zp3o <- RCB_ModelFittingFunction(data.mlsr, params.in, analysisType = 'P3')
names(zp2o)
names(zp3o)
names(zp2o$lsmTable)
names(zp3o$lsmTable)
names(zp2o)
names(zp3o)
names(zp4o)
names(zp5o)
zp2o$lsmTable
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
zp4o <- RCB_ModelFittingFunction(data.mlsr, params.in, analysisType = 'P4')
zp5o <- RCB_ModelFittingFunction(data.mlsr, params.in, analysisType = 'P5')
zp4o <- RCB_ModelFittingFunction(data.mlsr, params.in, analysisType = 'P4')
zp5o <- RCB_ModelFittingFunction(data.mlsr, params.in, analysisType = 'P5')
# Analysis of Variance Table
#
# Response: ObservationValueNumeric
# Df Sum Sq Mean Sq F value Pr(>F)
# SeedProductName  5 46.402  9.2804  1.8514 0.1904
# RepNumber        2 24.653 12.3264  2.4590 0.1353
# Residuals       10 50.127  5.0127
#
##
###
dataRM  <- fromJSON("/repos/RCB4Cloud/Reference/Data/md-rcb-input.json")
paramRM <- fromJSON("/repos/RCB4Cloud/Reference/Data/md-rcb-parameters.json")
# Load needed packages
suppressMessages(library(jsonlite, quietly=TRUE))
suppressMessages(library(aws.s3,   quietly=TRUE))
#suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
devtools::install_version("dae", version = "3.0-23", repos = "https://cran.r-project.org")
asremlPlusURL <- "http://cran.wustl.edu//src/contrib/Archive/asremlPlus/asremlPlus_2.0-12.tar.gz"
suppressMessages(install.packages(asremlPlusURL,repos=NULL,type="source"))
suppressMessages(library(asreml,     quietly=TRUE))
suppressMessages(library(asremlPlus, quietly=TRUE))
#options(digits = 20)
# Source code to be tested.
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
# Analysis of Variance Table
#
# Response: ObservationValueNumeric
# Df Sum Sq Mean Sq F value Pr(>F)
# SeedProductName  5 46.402  9.2804  1.8514 0.1904
# RepNumber        2 24.653 12.3264  2.4590 0.1353
# Residuals       10 50.127  5.0127
#
##
###
dataRM  <- fromJSON("/repos/RCB4Cloud/Reference/Data/md-rcb-input.json")
paramRM <- fromJSON("/repos/RCB4Cloud/Reference/Data/md-rcb-parameters.json")
unlist(paramRM)
sort(names(dataRM))
str(dataRM)
rmp4o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P4')
rmp5o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P5')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
rmp5o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P5')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
rmp5o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P5')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
rmp5o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P5')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
rmp5o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P5')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
rmp5o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P5')
zp5o$blupTable
names(zp5o)
names(rmp5o)
rmp5o$blupTable
rmp4o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P4')
view(rmp4o$lsmTable)
View(rmp4o$lsmTable)
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
rmp4o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P4')
View(rmp4o$lsmTable)
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
rmp4o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P4')
rmp5o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P5')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
rmp5o <- RCB_ModelFittingFunction(dataRM, paramRM, analysisType = 'P5')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
dataJM  <- fromJSON("/repos/RCB4Cloud/Reference/Data/JamanInput.json")
paramJM <- fromJSON("/repos/RCB4Cloud/Reference/Data/JamanParameters.json")
names(dataJM)
dataJM$analysisType
jmp4o <- RCB_ModelFittingFunction(dataJM, paramJM, analysisType = 'P2')
dataJM  <- fromJSON("/repos/RCB4Cloud/Reference/Data/JamanInput.json")$data
jmp4o <- RCB_ModelFittingFunction(dataJM, paramJM, analysisType = 'P2')
jmp5o <- RCB_ModelFittingFunction(dataJM, paramJM, analysisType = 'P3')
View(jmp5o$blupTable)
unlist(paramJM)
sort(names(dataJM))
head(dataJM$factorLevelId)
View(dataJM)
summary(dataJM$value)
View(jmp4o$lsmTable)
table(dataJm[,paramJM$subSiteId],dataJM[,paramJM$repId])
table(dataJM[,paramJM$subSiteId],dataJM[,paramJM$repId])
summary(jmp5o$blupTable$value)
summary(as.numeric(jmp5o$blupTable$value))
as.numeric(jmp5o$blupTable$value)-mean(as.numeric(jmp5o$blupTable$value))
as.numeric(jmp4o$blupTable$value)-mean(as.numeric(jmp4o$blupTable$value))
as.numeric(jmp4o$LSMTable$value)-mean(as.numeric(jmp4o$LSMTable$value))
names(jmp4o)
as.numeric(jmp4o$LsmTable$value)-mean(as.numeric(jmp4o$LsmTable$value))
head(jmp4o$lsmTable)
as.numeric(jmp4o$lsmTable$value)-mean(as.numeric(jmp4o$lsmTable$value))
as.numeric(jmp5o$blupTable$value)-mean(as.numeric(jmp5o$blupTable$value))
summary(as.numeric(jmp4o$lsmTable$value)-mean(as.numeric(jmp4o$lsmTable$value)))
summary(as.numeric(jmp5o$blupTable$value)-mean(as.numeric(jmp5o$blupTable$value)))
summary(as.numeric(jmp5o$blupTable$value)-mean(as.numeric(jmp5o$blupTable$value)))
jmp5o$varianceAnalysis
table(dataJM$isDsrDeactivated)
table(dataJM$isQaqcDeactivated)
jmp4o$anova
names(jmp5o$blupTable)
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
jmp4o <- RCB_ModelFittingFunction(dataJM, paramJM, analysisType = 'P2')
jmp5o <- RCB_ModelFittingFunction(dataJM, paramJM, analysisType = 'P3')
head(jmp4o$deltas)
-2.72601223480198 /9.88977409780837
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
jmp4o <- RCB_ModelFittingFunction(dataJM, paramJM, analysisType = 'P2')
jmp5o <- RCB_ModelFittingFunction(dataJM, paramJM, analysisType = 'P3')
write_json(jmp4o, "/repos/RCB4Cloud/Reference/Data/JMP2out.json", pretty=T,auto_unbox=T,digits=12)
write_json(jmp5o, "/repos/RCB4Cloud/Reference/Data/JMP3out.json", pretty=T,auto_unbox=T,digits=12)
?write_json
?toJSON
write_json(jmp5o, "/repos/RCB4Cloud/Reference/Data/JMP3out.json", pretty=T,auto_unbox=T,digits=12, na="string")
write_json(jmp4o, "/repos/RCB4Cloud/Reference/Data/JMP2out.json", pretty=T,auto_unbox=T,digits=12, na="string")
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
