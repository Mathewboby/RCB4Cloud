q()
suppressMessages(library(jsonlite, quietly=TRUE))
suppressMessages(library(aws.s3,   quietly=TRUE))
suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
asremlPlusURL <- "http://cran.wustl.edu//src/contrib/Archive/asremlPlus/asremlPlus_2.0-12.tar.gz"
suppressMessages(install.packages(asremlPlusURL,repos=NULL,type="source"))
suppressMessages(library(asreml,     quietly=TRUE))
suppressMessages(library(asremlPlus, quietly=TRUE))
# Source code to be tested.
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
# Load needed packages
suppressMessages(library(jsonlite, quietly=TRUE))
suppressMessages(library(aws.s3,   quietly=TRUE))
suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
asremlPlusURL <- "http://cran.wustl.edu//src/contrib/Archive/asremlPlus/asremlPlus_2.0-12.tar.gz"
suppressMessages(install.packages(asremlPlusURL,repos=NULL,type="source"))
version()
suppressMessages(install.packages('dae',repos = "http://cran.wustl.edu/"))
devtools::install_version("dae", version = "3.0-23", repos = "https://cran.r-project.org")
suppressMessages(library(asreml,     quietly=TRUE))
suppressMessages(library(asremlPlus, quietly=TRUE))
asremlPlusURL <- "http://cran.wustl.edu//src/contrib/Archive/asremlPlus/asremlPlus_2.0-12.tar.gz"
suppressMessages(install.packages(asremlPlusURL,repos=NULL,type="source"))
suppressMessages(library(asreml,     quietly=TRUE))
suppressMessages(library(asremlPlus, quietly=TRUE))
# Source code to be tested.
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
# Read in RCB default parameter list from Dominio
RCB_DefaultParameterList <- fromJSON("/repos/RCB4Cloud/Reference/Data/RCB_DefaultParameterList.json")
# Echo guts of RCB_DefaultParameterList
RCB_DefaultParameterList
# Read in S3-YLD-data-file for local Domino directory
dfyld <- as.data.frame(fromJSON("/repos/RCB4Cloud/Reference/Data/RCB_input_data.json"))
# For testing purposes create the following columns in dfyld
dfyld$numValue <- dfyld$NUM_VALUE
dfyld$fieldId  <- dfyld$FIELD_NAME
dfyld$repId    <- dfyld$BR_REP_ID
dfyld$factor1  <- dfyld$GERMPLASM_ID # can also use dfyld$TEST_SET_ENTRY_ID or dfyld$entryId
dfyld$experimentalUnitId <- as.character(dfyld$PLOT_ID)
RCB_ModelFittingFunction
params.in                 <- fromJSON('Reference/Data/parameters-rcb-md.json')
params.in$sufficientDataThreshold <- 18 # Is 20 but for the sake of the tests below reset to 18.
data.mlmr                 <- fromJSON('Reference/Data/input-rcb-md.json')
data.mlmr$SeedProductName <- as.factor(data.mlmr$SeedProductName)
data.mlmr$FieldName       <- as.factor(data.mlmr$FieldName)
data.mlmr$RepNumber       <- as.factor(data.mlmr$RepNumber)
mlmrcc                    <- complete.cases(data.mlmr[,c("ObservationValueNumeric","FieldName","RepNumber","SeedProductName")])
mlmrdup                   <- duplicated(data.mlmr[,c("ObservationValueNumeric","FieldName","RepNumber","SeedProductName")])
data.mlmr <- droplevels(data.mlmr[mlmrcc == TRUE & mlmrdup == FALSE, ])
data.slmr <- droplevels(data.mlmr[data.mlmr$FieldName == data.mlmr$FieldName[1], ])
data.mlsr <- droplevels(data.mlmr[data.mlmr$RepNumber == data.mlmr$RepNumber[1], ])
dim(data.mlmr) # returns 54 28
dim(data.mlsr) # returns 18 28
dim(data.slmr) # returns 18 28
length(unique(data.mlmr$SeedProductName)) # returns 6
length(unique(data.mlmr$FieldName))       # returns 3
length(unique(data.mlmr$RepNumber))       # returns 3
length(unique(data.mlsr$SeedProductName)) # returns 6
length(unique(data.mlsr$FieldName))       # returns 3
length(unique(data.mlsr$RepNumber))       # returns 1
length(unique(data.slmr$SeedProductName)) # returns 6
length(unique(data.slmr$FieldName))       # returns 1
length(unique(data.slmr$RepNumber))       # returns 3
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
write_json(resultsmlmr, "/repos/RCB4Cloud/Reference/Data/AATest.json", pretty =T, auto_unbox=T, digits=12)
source('/repos/RCB4Cloud/R/RCB_SupportFunctions.R')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
### MLMR model fit (P4)
resultsmlmr    <- RCB_ModelFittingFunction(data.mlmr, params.in, analysisType = 'P4')
source('/repos/RCB4Cloud/R/RCB_MainFunction.R')
